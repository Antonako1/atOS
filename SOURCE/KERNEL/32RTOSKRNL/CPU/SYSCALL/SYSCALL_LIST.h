// Messaging
SYSCALL_ENTRY(SYSCALL_MESSAGE_AMOUNT, SYS_MESSAGE_AMOUNT) // U32(U32 pid)
SYSCALL_ENTRY(SYSCALL_GET_MESSAGE, SYS_GET_MESSAGE) // VOIDPTR(U32 pid)
SYSCALL_ENTRY(SYSCALL_SEND_MESSAGE, SYS_SEND_MESSAGE) // VOID(U32 pid, U8 *msg, U8 length, U32 signal)

SYSCALL_ENTRY(SYSCALL_GET_CUR_TCB, SYS_GET_CURRENT_TCB) // TCB *(void)
SYSCALL_ENTRY(SYSCALL_GET_MASTER_TCB, SYS_GET_MASTER_TCB) // TCB *(void)
SYSCALL_ENTRY(SYSCALL_GET_TCB_BY_PID, SYS_GET_TCB_BY_PID) // TCB *(U32 pid)
SYSCALL_ENTRY(SYSCALL_GET_PARENT_TCB, SYS_GET_PARENT_TCB) // TCB *(void)
SYSCALL_ENTRY(SYSCALL_PROC_GETPID_BY_NAME, SYS_PROC_GETPID_BY_NAME) // U32(U8 *name)

// PS2 Keyboard
SYSCALL_ENTRY(SYSCALL_GET_LAST_KEY_PRESSED, SYS_GET_LAST_KEY_PRESSED) // KEYPRESS *(void)
SYSCALL_ENTRY(SYSCALL_KEYPRESS_TO_CHARS, SYS_KEYPRESS_TO_CHARS) // U8 *(KEYPRESS *)
SYSCALL_ENTRY(SYSCALL_GET_KP_DATA, SYS_GET_KP_DATA) // KP_DATA *()

// Memory management
SYSCALL_ENTRY(SYSCALL_KMALLOC, SYS_KMALLOC) // void *(U32)
SYSCALL_ENTRY(SYSCALL_KFREE, SYS_KFREE) // void (void *)
SYSCALL_ENTRY(SYSCALL_KREALLOC, SYS_KREALLOC) // void *(void *, U32, U32)
SYSCALL_ENTRY(SYSCALL_KCALLOC, SYS_KCALLOC) // void *(U32, U32)

// Graphics
SYSCALL_ENTRY(SYSCALL_VBE_DRAW_CHARACTER, SYS_VBE_DRAW_CHARACTER) // void(U32 x, U32 y, U8 ch, U32 fg, U32 bg)
SYSCALL_ENTRY(SYSCALL_VBE_DRAW_STRING, SYS_VBE_DRAW_STRING) // void(U32 x, U32 y, U8 *str, U32 fg, U32 bg)
SYSCALL_ENTRY(SYSCALL_VBE_UPDATE_VRAM, SYS_VBE_UPDATE_VRAM) // void(void)
SYSCALL_ENTRY(SYSCALL_VBE_CLEAR_SCREEN, SYS_VBE_CLEAR_SCREEN) // void(U32 color)
SYSCALL_ENTRY(SYSCALL_VBE_DRAW_PIXEL, SYS_VBE_DRAW_PIXEL) // void(U32 x, U32 y, U32 color)
SYSCALL_ENTRY(SYSCALL_VBE_DRAW_FRAMEBUFFER, SYS_VBE_DRAW_FRAMEBUFFER) // void(U32 pos, U32 color)
SYSCALL_ENTRY(SYSCALL_VBE_DRAW_ELLIPSE, SYS_VBE_DRAW_ELLIPSE) // void(U32 x, U32 y, U32 rx, U32 ry, U32 color)
SYSCALL_ENTRY(SYSCALL_VBE_DRAW_LINE, SYS_VBE_DRAW_LINE) // void(U32 x1, U32 y1, U32 x2, U32 y2, U32 color)
SYSCALL_ENTRY(SYSCALL_VBE_DRAW_RECTANGLE, SYS_VBE_DRAW_RECTANGLE) // void(U32 x, U32 y, U32 width, U32 height, U32 color)

// PIT
SYSCALL_ENTRY(SYSCALL_GET_PIT_TICK, SYS_GET_PIT_TICK) // void(void)
SYSCALL_ENTRY(SYSCALL_GET_SECONDS, SYS_GET_SECONDS)
SYSCALL_ENTRY(SYSCALL_PIT_SLEEP, SYS_PIT_SLEEP) // void(U32 ms)

// Disk IO
SYSCALL_ENTRY(SYSCALL_CDROM_READ, SYS_CDROM_READ) // U32(U32 lba, U32 sectors, U8 *buf)
SYSCALL_ENTRY(SYSCALL_HDD_READ, SYS_HDD_READ_SECTOR) // U32(U32 lba, U32 sectors, U8 *buf)
SYSCALL_ENTRY(SYSCALL_HDD_WRITE, SYS_HDD_WRITE_SECTOR) // U32(U32 lba, U32 sectors, U8 *buf)

// Filesystem
// ISO9660
SYSCALL_ENTRY(SYSCALL_ISO9660_READ_ENTRY, SYS_ISO9660_READ_ENTRY) // U32(U8 *path, ISO9660_DIRENT *out)
SYSCALL_ENTRY(SYSCALL_ISO9660_FILECONTENTS, SYS_ISO9660_FILECONTENTS) // U8 *(U8 *path)
SYSCALL_ENTRY(SYSCALL_ISO9660_FREE_MEMORY, SYS_ISO9660_FREE_MEMORY) // void(U8 *ptr)

// FAT32
SYSCALL_ENTRY(SYSCALL_GET_ROOT_CLUSTER, SYS_GET_ROOT_CLUSTER) // ();
SYSCALL_ENTRY(SYSCALL_FIND_DIR_BY_NAME_AND_PARENT, SYS_FIND_DIR_BY_NAME_AND_PARENT) // (U32 parent, U8 *name); 
SYSCALL_ENTRY(SYSCALL_FIND_FILE_BY_NAME_AND_PARENT, SYS_FIND_FILE_BY_NAME_AND_PARENT) // (U32 parent, U8 *name);
SYSCALL_ENTRY(SYSCALL_FIND_DIR_ENTRY_BY_NAME_AND_PARENT, SYS_FIND_DIR_ENTRY_BY_NAME_AND_PARENT) // (DIR_ENTRY *out, U32 parent, U8 *name);
SYSCALL_ENTRY(SYSCALL_READ_LFNS, SYS_READ_LFNS) // (DIR_ENTRY *ent, LFN *out, U32 *size_out);
SYSCALL_ENTRY(SYSCALL_CREATE_CHILD_DIR, SYS_CREATE_CHILD_DIR) // (U32 parent_cluster, U8 *name, U8 attrib, U32 *cluster_out);
SYSCALL_ENTRY(SYSCALL_CREATE_CHILD_FILE, SYS_CREATE_CHILD_FILE) // (U32 parent_cluster, U8 *name, U8 attrib, PU8 filedata, U32 filedata_size, U32 *cluster_out);
SYSCALL_ENTRY(SYSCALL_DIR_ENUMERATE_LFN, SYS_DIR_ENUMERATE_LFN) // (U32 dir_cluster, FAT_LFN_ENTRY *out_entries, U32 *max_count);
SYSCALL_ENTRY(SYSCALL_DIR_ENUMERATE, SYS_DIR_ENUMERATE) // (U32 dir_cluster, DIR_ENTRY *out_entries, U32 *max_count);
SYSCALL_ENTRY(SYSCALL_DIR_REMOVE_ENTRY, SYS_DIR_REMOVE_ENTRY) // (DIR_ENTRY *entry, const char *name);
SYSCALL_ENTRY(SYSCALL_READ_FILE_CONTENTS, SYS_READ_FILE_CONTENTS) // (U32 *size_out, DIR_ENTRY *entry);
SYSCALL_ENTRY(SYSCALL_FILE_WRITE, SYS_FILE_WRITE) // (DIR_ENTRY *entry, const U8 *data, U32 size);
SYSCALL_ENTRY(SYSCALL_FILE_APPEND, SYS_FILE_APPEND) // (DIR_ENTRY *entry, const U8 *data, U32 size);
SYSCALL_ENTRY(SYSCALL_PATH_RESOLVE_ENTRY, SYS_PATH_RESOLVE_ENTRY) // (U8 *path, FAT_LFN_ENTRY *out_entry);
SYSCALL_ENTRY(SYSCALL_GET_ROOT_DIR_ENTRY, SYS_GET_ROOT_DIR_ENTRY) // DIR_ENTRY GET_ROOT_DIR_ENTRY(void). Returns allocated dir_entry
// Audio
SYSCALL_ENTRY(SYSCALL_AC97_TONE, SYS_AC97_TONE) // U32(freq, ms, amp, rate, 0)
SYSCALL_ENTRY(SYSCALL_AC97_STOP, SYS_AC97_STOP) // void(void)

// Sys
// SYSCALL_ENTRY(SYSCALL_RUN_BINARY, SYS_RUN_BINARY)
// SYSCALL_ENTRY(SYSCALL_KILL_BINARY, SYS_KILL_BINARY)
